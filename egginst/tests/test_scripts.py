import contextlib
import shutil
import sys
import tempfile
import unittest

import os.path as op

import mock

from egginst.scripts import fix_script, get_executable

@contextlib.contextmanager
def mkdtemp():
    d = tempfile.mkdtemp()
    yield d
    shutil.rmtree(d)

class TestScripts(unittest.TestCase):
    def test_get_executable(self):
        # FIXME: EggInst init overwrite egginst.scripts.executable. Need to
        # mock this until we remove that insanity
        with mock.patch("egginst.scripts.executable", sys.executable):
            executable = get_executable()
            self.assertEqual(executable, sys.executable)

            executable = get_executable(with_quotes=True)
            self.assertEqual(executable, "\"{0}\"".format(sys.executable))

        with mock.patch("egginst.scripts.on_win", "win32"):
            with mock.patch("egginst.scripts.executable", "python.exe"):
                executable = get_executable()
                self.assertEqual(executable, "python.exe")

            with mock.patch("egginst.scripts.executable", "pythonw.exe"):
                executable = get_executable()
                self.assertEqual(executable, "python.exe")

                executable = get_executable(pythonw=True)
                self.assertEqual(executable, "pythonw.exe")

class TestFixScript(unittest.TestCase):
    def test_egginst_script_untouched(self):
        """
        Ensure we don't touch a script which has already been written by
        egginst.
        """
        simple_script = """\
#!/home/davidc/src/enthought/enstaller/.env/bin/python
# This script was created by egginst when installing:
#
#   enstaller-4.6.3.dev1-py2.7.egg
#
if __name__ == '__main__':
    import sys
    from enstaller.patch import main

    sys.exit(main())
"""

        with mkdtemp() as d:
            path = op.join(d, "script")
            with open(path, "wt") as fp:
                fp.write(simple_script)

            fix_script(path)

            with open(path, "rt") as fp:
                self.assertEqual(fp.read(), simple_script)

    @mock.patch("egginst.scripts.executable", sys.executable)
    def test_setuptools_script_fixed(self):
        """
        Ensure a script generated by setuptools is fixed.
        """
        setuptools_script = """\
#!/dummy_path/.env/bin/python
# EASY-INSTALL-ENTRY-SCRIPT: 'enstaller==4.6.3.dev1','console_scripts','enpkg'
__requires__ = 'enstaller==4.6.3.dev1'
import sys
from pkg_resources import load_entry_point

if __name__ == '__main__':
    sys.exit(
        load_entry_point('enstaller==4.6.3.dev1', 'console_scripts', 'enpkg')()
    )
"""
        r_egginst_script = """\
#!{prefix}
# EASY-INSTALL-ENTRY-SCRIPT: 'enstaller==4.6.3.dev1','console_scripts','enpkg'
__requires__ = 'enstaller==4.6.3.dev1'
import sys
from pkg_resources import load_entry_point

if __name__ == '__main__':
    sys.exit(
        load_entry_point('enstaller==4.6.3.dev1', 'console_scripts', 'enpkg')()
    )
""".format(prefix=sys.executable)

        with mkdtemp() as d:
            path = op.join(d, "script")
            with open(path, "wt") as fp:
                fp.write(setuptools_script)

            fix_script(path)

            with open(path, "rt") as fp:
                self.assertEqual(fp.read(), r_egginst_script)
